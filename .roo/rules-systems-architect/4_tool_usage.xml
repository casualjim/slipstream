<tool_usage_guide>
  <tool_priorities>
    <priority level="1">
      <tool>codebase_search</tool>
      <when>Always use first for any new area of exploration</when>
      <why>Semantic intent search surfaces relevant implementations and boundaries faster than filename/regex</why>
    </priority>
    <priority level="2">
      <tool>read_file</tool>
      <when>After identifying candidates via codebase_search</when>
      <why>Obtain exact context and line numbers to enable precise edits</why>
    </priority>
    <priority level="3">
      <tool>apply_diff</tool>
      <when>For surgical edits to existing files with precise line/section targets</when>
      <why>Minimizes churn and ensures safe, targeted modifications</why>
    </priority>
    <priority level="4">
      <tool>write_to_file</tool>
      <when>When creating a new file or performing an intentional full rewrite</when>
      <why>Requires complete file content; use sparingly to avoid accidental truncation</why>
    </priority>
    <priority level="5">
      <tool>execute_command</tool>
      <when>For running cargo, bun, mise tasks, or servers</when>
      <why>Validate builds/tests, run dev servers, or perform migrations</why>
    </priority>
    <priority level="6">
      <tool>search_files</tool>
      <when>Regex-based discovery after initial semantic search</when>
      <why>Useful for finding specific identifiers or TODOs across files</why>
    </priority>
  </tool_priorities>

  <editing_guidance>
    <apply_diff_best_practices>
      <practice>Always read the target file first to ensure exact content match and correct line numbers.</practice>
      <practice>Group multiple related changes into a single apply_diff with separate SEARCH/REPLACE blocks.</practice>
      <practice>Preserve formatting and surrounding context; avoid broad replacements.</practice>
      <practice>Re-run codebase_search if scope expands to new areas before further edits.</practice>
    </apply_diff_best_practices>

    <write_to_file_best_practices>
      <practice>Use only for new files or full, deliberate rewrites.</practice>
      <practice>Provide complete file content with no placeholders.</practice>
      <practice>Keep XML instruction files well-structured with semantic tags and line breaks.</practice>
    </write_to_file_best_practices>
  </editing_guidance>

  <commands_and_env>
    <rust>
      <command>cargo test --all</command>
      <notes>Use for broad validation; prefer targeted crates for speed when iterating.</notes>
      <style>Prefer eyre::Result and thiserror for boundary contracts; no unwrap/expect in prod code paths.</style>
    </rust>
    <typescript>
      <command>bun test</command>
      <notes>Strict types; avoid any. Ensure tsconfig paths are respected.</notes>
    </typescript>
    <workspace>
      <command>mise run build</command>
      <notes>Use mise run scripts per AGENTS.md to ensure consistent local tooling.</notes>
    </workspace>
    <workers>
      <command>mise run test:workers agent-registry-api</command>
      <notes>Ensure env vars exported as per AGENTS.md before running tests.</notes>
    </workers>
  </commands_and_env>

  <mcp_and_browser>
    <browser_when>
      Use browser tooling to validate external HTTP contracts, explore API docs, or test Workers endpoints as part of operability checks.
    </browser_when>
    <mcp_when>
      Use MCP servers for documentation lookups, Cloudflare operations, and filesystem tasks outside the workspace when required.
    </mcp_when>
  </mcp_and_browser>

  <examples>
    <example scenario="surgical_edit_multiple_blocks">
      <description>Perform two precise replacements in a Rust module.</description>
      <steps>
        <step>codebase_search to locate module and function</step>
        <step>read_file to capture exact content and line numbers</step>
        <step>apply_diff with two SEARCH/REPLACE blocks using correct :start_line</step>
      </steps>
    </example>

    <example scenario="create_new_rules_file">
      <description>Create a new XML instruction file with complete content via write_to_file.</description>
      <steps>
        <step>Plan XML structure using best practices</step>
        <step>write_to_file with full content and accurate line_count</step>
      </steps>
    </example>

    <example scenario="validate_dev_environment">
      <description>Run build/tests using workspace scripts and tailored env.</description>
      <steps>
        <step>execute_command: mise run build</step>
        <step>execute_command: mise run test</step>
      </steps>
    </example>
  </examples>
</tool_usage_guide>
